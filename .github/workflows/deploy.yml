name: Deploy

on:
  workflow_dispatch:
    inputs:
      release:
        description: The tag of the release to append the artifacts to.
        required: false
        type: string

jobs:
  deploy:
    name: ${{ matrix.context.display-name }}
    permissions:
      contents: write
    runs-on: ${{ matrix.context.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        context:
          - runs-on: windows-2022
            rid: win-x64
            display-name: Windows (x64)
          - runs-on: windows-2022
            rid: win-arm64
            display-name: Windows (ARM64)
          - runs-on: ubuntu-22.04
            rid: linux-x64
            display-name: Linux (x64)
          - runs-on: ubuntu-22.04
            rid: linux-arm64
            display-name: Linux (ARM64)
          - runs-on: macos-15
            rid: osx-x64
            display-name: OSX (x64)
          - runs-on: macos-15
            rid: osx-arm64
            display-name: OSX (ARM64)
    timeout-minutes: 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        id: setup-dotnet
        uses: actions/setup-dotnet@v4

      - name: Setup Environment
        if: ${{ matrix.context.rid == 'linux-arm64' }}
        run: |
          sudo dpkg --add-architecture arm64
          sudo bash -c 'cat > /etc/apt/sources.list.d/arm64.list <<EOF
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse
          EOF'
          sudo sed -i -e 's/deb http/deb [arch=amd64] http/g' /etc/apt/sources.list
          sudo sed -i -e 's/deb mirror/deb [arch=amd64] mirror/g' /etc/apt/sources.list
          sudo apt update
          sudo apt install -y clang llvm binutils-aarch64-linux-gnu gcc-aarch64-linux-gnu zlib1g-dev:arm64

      - name: Build & Pack Project
        id: build
        run: dotnet publish -c Release --sc false -r ${{ matrix.context.rid }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Binaries (${{ matrix.context.rid }})
          path: |
            src/Savepatch/bin/Release/net8.0/${{ matrix.context.rid }}/publish/**/*

      - name: Upload to Release
        if: ${{ inputs.release != '' }}
        env:
          ARCHIVE_NAME: ${{ matrix.context.display-name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ inputs.release }}
          RID: ${{ matrix.context.rid }}
        run: |
          tar -czf "$ARCHIVE_NAME.tar.gz" -C "src/Savepatch/bin/Release/net8.0/$RID/publish" .
          gh release upload "$RELEASE_TAG" "$ARCHIVE_NAME.tar.gz#$ARCHIVE_NAME"
